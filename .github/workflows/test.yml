name: test

on:
  push:
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - 'README.md'

jobs:
  compile:
    strategy:
      fail-fast: false
      matrix:
        fc:
          - gfortran
          - ifort
        debug:
          - no
          - yes
      # This matrix is copied in the test job - keep them in sync

    name: test (fc=${{ matrix.fc }}, debug=${{ matrix.debug }})

    runs-on: ubuntu-latest

    steps:

    - name: Setup Intel repo
      if: matrix.fc == 'ifort'
      id: intel-repo
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        sudo echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
        INTELVERSION=$(apt-cache show intel-oneapi-compiler-fortran | grep Version | head -1)
        echo "::set-output name=intelversion::$INTELVERSION"

    - name: Cache intel installation
      if: matrix.fc == 'ifort'
      id: cache-intel
      uses: actions/cache@v3
      with:
        path: |
          /opt/intel
        key: ${{ steps.intel-repo.outputs.intelversion }}

    - name: Install Intel compilers
      if: ${{ steps.cache-intel.outputs.cache-hit != 'true' && matrix.fc == 'ifort' }}
      run: |
        sudo apt-get install -y intel-oneapi-common-vars
        sudo apt-get install -y intel-oneapi-compiler-fortran
        sudo apt-get install -y intel-oneapi-mpi
        sudo apt-get install -y intel-oneapi-mpi-devel

    - name: Setup Intel oneAPI environment
      if: matrix.fc == 'ifort'
      run: |
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV

    - uses: actions/checkout@v3

    - name: Compile
      working-directory: ./work
      run: make ${{ matrix.debug == 'yes' && 'debug' || '' }}
      env:
        FC: ${{ matrix.fc }}

    - name: Save binary as artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.fc }}-${{ matrix.debug }}
        path: ./work/hormone

  test:
    needs: compile
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        fc:
          - gfortran
          - ifort
        debug:
          - no
          - yes
        test:
          - sodshock_x
          - sedov_default

    steps:
    - uses: actions/checkout@v3

    - name: Download binary
      uses: actions/download-artifact@v2
      with:
        name: ${{ matrix.fc }}-${{ matrix.debug }}
        path: ./work

    - name: Update startfile
      run: |
        sed -i "s/sodshock_x/${{ matrix.test }}/g" startfile

    - name: Run test
      working-directory: ./work
      run: ./hormone

  # Gather results into a dummy job that will fail if the previous job fails
  gather_results:
    if: always()
    needs:
    - test

    # This name matches the branch protection requirement
    name: test

    runs-on: ubuntu-latest

    steps:
    - name: Check all tests
      run: |
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "All tests succeeded"
        else
          echo "At least one test failed"
          exit 1
        fi
