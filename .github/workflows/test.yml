name: Test suite

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'README.md'
  pull_request:
    paths-ignore:
      - 'README.md'

jobs:
  compile:
    strategy:
      fail-fast: false
      matrix:
        fc:
          - gfortran
          - ifx
        debug:
          - no
          - yes
        mpi:
          - no
          - yes
        petsc:
          - no
          - yes
        exclude:
          - fc: ifx
            mpi: yes
          # Exclude ifx for petsc
          - fc: ifx
            petsc: yes

    name: compile (${{ matrix.fc }} ${{ matrix.mpi == 'yes' && 'MPI' || 'serial' }}${{ matrix.debug == 'yes' && ' debug' || '' }}${{ matrix.petsc == 'yes' && ' PETSc' || '' }})

    runs-on: ubuntu-latest

    steps:
        - uses: actions/checkout@v4

        - uses: ./.github/actions/setup-intel-oneapi
          if: matrix.fc == 'ifx'

        - name: Set up OpenMPI
          if: matrix.mpi == 'yes'
          run: sudo apt-get install -y openmpi-bin libopenmpi-dev

        - name: Set up PETSc
          if: matrix.petsc == 'yes'
          run: |
            sudo apt-get update
            sudo apt-get install -y petsc-dev

        - name: Compile
          working-directory: ./work
          run: |
            set -o pipefail
            make ${{ matrix.debug == 'yes' && 'debug' || '' }} |& tee compile.log
          env:
            FC: ${{ matrix.fc }}
            MPI: ${{ matrix.mpi }}
            USE_PETSC: ${{ matrix.petsc == 'yes' && 'yes' || 'no' }}

        - name: Save binary as artifact
          uses: actions/upload-artifact@v4
          with:
            name: ${{ matrix.fc }}-debug_${{ matrix.debug }}-mpi_${{ matrix.mpi }}-petsc_${{ matrix.petsc }}
            path: ./work/hormone

        - name: Save compile log as artifact
          uses: actions/upload-artifact@v4
          with:
            name: ${{ matrix.fc }}-debug_${{ matrix.debug }}-mpi_${{ matrix.mpi }}-petsc_${{ matrix.petsc }}-compile-log
            path: ./work/compile.log

  test:
    needs: compile
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        fc:
          - gfortran
          - ifx
        debug:
          - no
          - yes
        mpi:
          - no
          - yes
        test:
          - sodshock_x
          - sodshock_y
          - sodshock_z
          - briowushock_x
          - briowushock_y
          - briowushock_z
          - orszagtang_xy
          - orszagtang_yz
          - orszagtang_xz
          - sedov_default
          - KHinstability
          - star_sph
          - polytrope
          - smearing
          - iotest
          - diffusion1d_x
          - diffusion1d_y
          - diffusion1d_z
          - diffusion2d_xy
          - diffusion2d_xz
          - diffusion2d_yz
          - radshock_x
          - radshock_y
          - radshock_z
          - radstar
        flat:
          - no
          - yes
        petsc:
          - no
        mpi_tasks:
          - 2
        omp_threads:
          - 2
        include:
          # These tests should be run with 4 MPI tasks as well
          - test: smearing
            fc: gfortran
            debug: no
            mpi: yes
            flat: yes
            mpi_tasks: 4
            omp_threads: 1
            petsc: no
          - test: polytrope
            fc: gfortran
            debug: no
            mpi: yes
            flat: yes
            mpi_tasks: 4
            omp_threads: 1
            petsc: no
          - test: KHinstability
            fc: gfortran
            debug: no
            mpi: yes
            flat: yes
            mpi_tasks: 4
            omp_threads: 1
            petsc: no
          - test: orszagtang_xy
            fc: gfortran
            debug: no
            mpi: yes
            flat: yes
            mpi_tasks: 4
            omp_threads: 1
            petsc: no
          - test: orszagtang_yz
            fc: gfortran
            debug: no
            mpi: yes
            flat: yes
            mpi_tasks: 4
            omp_threads: 1
            petsc: no
          - test: orszagtang_xz
            fc: gfortran
            debug: no
            mpi: yes
            flat: yes
            mpi_tasks: 4
            omp_threads: 1
            petsc: no
          # Radiation and gravity tests should be used to test PETSc implementation with MPI
          - test: star_sph
            fc: gfortran
            debug: yes
            mpi: yes
            petsc: yes
            flat: yes
            mpi_tasks: 2
            omp_threads: 2
          - test: polytrope
            fc: gfortran
            debug: yes
            mpi: yes
            petsc: yes
            flat: yes
            mpi_tasks: 2
            omp_threads: 2
          - test: diffusion1d_x
            fc: gfortran
            debug: yes
            mpi: yes
            petsc: yes
            flat: no
            mpi_tasks: 2
            omp_threads: 2
          - test: diffusion1d_y
            fc: gfortran
            debug: yes
            mpi: yes
            petsc: yes
            flat: no
            mpi_tasks: 2
            omp_threads: 2
          - test: diffusion1d_z
            fc: gfortran
            debug: yes
            mpi: yes
            petsc: yes
            flat: no
            mpi_tasks: 2
            omp_threads: 2
          - test: diffusion2d_xy
            fc: gfortran
            debug: yes
            mpi: yes
            petsc: yes
            flat: no
            mpi_tasks: 2
            omp_threads: 2
          - test: diffusion2d_xz
            fc: gfortran
            debug: yes
            mpi: yes
            petsc: yes
            flat: no
            mpi_tasks: 2
            omp_threads: 2
          - test: diffusion2d_yz
            fc: gfortran
            debug: yes
            mpi: yes
            petsc: yes
            flat: no
            mpi_tasks: 2
            omp_threads: 2
          - test: radshock_x
            fc: gfortran
            debug: yes
            mpi: yes
            petsc: yes
            flat: yes
            mpi_tasks: 2
            omp_threads: 2
          - test: radshock_y
            fc: gfortran
            debug: yes
            mpi: yes
            petsc: yes
            flat: yes
            mpi_tasks: 2
            omp_threads: 2
          - test: radshock_z
            fc: gfortran
            debug: yes
            mpi: yes
            petsc: yes
            flat: yes
            mpi_tasks: 2
            omp_threads: 2
          - test: radstar
            fc: gfortran
            debug: yes
            mpi: yes
            petsc: yes
            flat: yes
            mpi_tasks: 2
            omp_threads: 2

        exclude:
          - fc: ifx
            mpi: yes
          # The star setup routine is susceptible to roundoff error
          # which gives very different results with the intel compiler
          #- test: polytrope
          #  fc: ifx
          # MICCG solver is not compatible with MPI
          - test: star_sph
            mpi: yes
            petsc: no
          - test: diffusion1d_x
            mpi: yes
            petsc: no
          - test: diffusion1d_y
            mpi: yes
            petsc: no
          - test: diffusion1d_z
            mpi: yes
            petsc: no
          - test: diffusion2d_xy
            mpi: yes
            petsc: no
          - test: diffusion2d_xz
            mpi: yes
            petsc: no
          - test: diffusion2d_yz
            mpi: yes
            petsc: no
          - test: radshock_x
            mpi: yes
            petsc: no
          - test: radshock_y
            mpi: yes
            petsc: no
          - test: radshock_z
            mpi: yes
            petsc: no
          - test: radstar
            mpi: yes
            petsc: no
          # diffusion1d does not use hydro, so reconstruction is irrelevant
          - test: diffusion1d_x
            flat: yes
          - test: diffusion1d_y
            flat: yes
          - test: diffusion1d_z
            flat: yes
          - test: diffusion2d_xy
            flat: yes
          - test: diffusion2d_xz
            flat: yes
          - test: diffusion2d_yz
            flat: yes

    name: ${{ matrix.test }} (${{ matrix.fc }} ${{ matrix.mpi == 'yes' && 'MPI' || 'serial' }}${{ matrix.debug == 'yes' && ' debug' || '' }}${{ matrix.flat == 'yes' && ' flat' || '' }}${{ matrix.mpi_tasks == 4 && ' 4x1' || '' }}${{ matrix.petsc == 'yes' && ' PETSc' || '' }})

    steps:
    - uses: actions/checkout@v4

    - uses: ./.github/actions/setup-intel-oneapi
      if: matrix.fc == 'ifx'

    - name: Set up OpenMPI
      if: matrix.mpi == 'yes'
      run: sudo apt-get install -y openmpi-bin libopenmpi-dev

    - name: Set up PETSc
      if: matrix.petsc == 'yes'
      run: |
        sudo apt-get update
        sudo apt-get install -y petsc-dev

    - name: Check gfortran version
      run: gfortran --version

    - name: Download binary
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.fc }}-debug_${{ matrix.debug }}-mpi_${{ matrix.mpi }}-petsc_${{ matrix.petsc }}
        path: ./work

    - name: Set executable permissions for binary
      run: chmod +x ./work/hormone

    - name: Update startfile
      working-directory: ./work
      run: sed -i "s/sodshock_x/${{ matrix.test }}/g" startfile

    - name: Remove "test" after test name if doing iotest
      if: matrix.test == 'iotest'
      working-directory: ./work
      run: sed -i "s/iotest test/iotest/g" startfile

    - name: Flat reconstruction switch
      if: matrix.flat == 'yes'
      working-directory: ./para
      # If flux_limiter is specified, replace it with "flat", otherwise add the option
      run: |
        if grep -q "flux_limiter=" parameters_${{ matrix.test }}; then
          sed -i "s/flux_limiter='[^']*'/flux_limiter='flat'/" parameters_${{ matrix.test }}
        else
          sed -i "s/&simucon/\&simucon flux_limiter='flat'/" parameters_${{ matrix.test }}
        fi
        cat parameters_${{ matrix.test }}

    - name: PETSc solver switch
      if: matrix.petsc == 'yes'
      working-directory: ./para
      run: |
        if grep -q "matrix_solver=" parameters_${{ matrix.test }}; then
          sed -i "s/matrix_solver='[^']*'/matrix_solver=0/" parameters_${{ matrix.test }}
        else
          sed -i "s/&mat_con/\&mat_con matrix_solver=0/" parameters_${{ matrix.test }}
        fi
        cat parameters_${{ matrix.test }}

    - name: Run test
      working-directory: ./work
      run: |
        if [[ "${{ matrix.mpi }}" == "yes" ]]; then
          export OMP_NUM_THREADS=${{ matrix.omp_threads }}
          mpirun -np ${{ matrix.mpi_tasks }} --oversubscribe ./hormone
        else
          export OMP_NUM_THREADS=${{ matrix.omp_threads }}
          ./hormone
        fi

  compiler-warnings:
    needs: compile
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        fc:
          - gfortran
        debug:
          - yes
        mpi:
          - no
          - yes
        petsc:
          - no
          - yes

    name: warnings (${{ matrix.fc }} ${{ matrix.mpi == 'yes' && 'MPI' || 'serial' }}${{ matrix.debug == 'yes' && ' debug' || '' }}${{ matrix.petsc == 'yes' && ' PETSc' || '' }})

    steps:
    - uses: actions/checkout@v4

    - name: Download compile log
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.fc }}-debug_${{ matrix.debug }}-mpi_${{ matrix.mpi }}-petsc_${{ matrix.petsc }}-compile-log

    - name: Check for compiler warnings
      run: |
        cat ./compile.log
        if grep -q "Warning: " ./compile.log; then
          echo "Compiler warnings found"
          exit 1
        else
          echo "No compiler warnings found"
        fi

  # Gather results into a dummy job that will fail if the previous job fails
  gather_results:
    if: always()
    needs:
    - test

    # This name matches the branch protection requirement
    name: test

    runs-on: ubuntu-latest

    steps:
    - name: Check all tests
      run: |
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "All tests succeeded"
        else
          echo "At least one test failed"
          exit 1
        fi
